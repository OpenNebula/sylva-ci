---
cluster:
  k8s_version: v1.31.4

  capi_providers:
    infra_provider: capone
    bootstrap_provider: cabpk

  capone:
    public_network: service

    master_template: capone-kubeadm-mgmt-master
    worker_template: capone-kubeadm-mgmt-worker

    images:
      - imageName: capone-kubeadm-mgmt-node
        imageContent: |
          PATH = "https://d24fmfybwxpuhu.cloudfront.net/capone-6.10.0-3-20250205.qcow2"
          DEV_PREFIX = "vd"

    templates:
      - templateName: capone-kubeadm-mgmt-master
        templateContent: |
          CONTEXT = [
            NETWORK = "YES",
            SET_HOSTNAME = "$NAME",
            SSH_PUBLIC_KEY = "$USER[SSH_PUBLIC_KEY]",
            TOKEN = "YES" ]
          CPU = "1"
          CPU_MODEL = [
            MODEL = "host-passthrough" ]
          DISK = [
            IMAGE = "capone-kubeadm-mgmt-node",
            SIZE = "65536" ]
          GRAPHICS = [
            LISTEN = "0.0.0.0",
            TYPE = "vnc" ]
          HYPERVISOR = "kvm"
          LXD_SECURITY_PRIVILEGED = "true"
          MEMORY = "12288"
          OS = [
            ARCH = "x86_64",
            FIRMWARE_SECURE = "YES" ]
          SCHED_REQUIREMENTS = "HYPERVISOR=kvm"
          VCPU = "8"
          SCHED_ACTION = [
            ACTION = "undeploy",
            ID     = "0",
            TIME   = "+7200" ]
          SCHED_ACTION = [
            ACTION = "terminate",
            ID     = "1",
            TIME   = "+57600" ]
      - templateName: capone-kubeadm-mgmt-worker
        templateContent: |
          CONTEXT = [
            NETWORK = "YES",
            SET_HOSTNAME = "$NAME",
            SSH_PUBLIC_KEY = "$USER[SSH_PUBLIC_KEY]",
            TOKEN = "YES" ]
          CPU = "1"
          CPU_MODEL = [
            MODEL = "host-passthrough" ]
          DISK = [
            IMAGE = "capone-kubeadm-mgmt-node",
            SIZE = "65536" ]
          GRAPHICS = [
            LISTEN = "0.0.0.0",
            TYPE = "vnc" ]
          HYPERVISOR = "kvm"
          LXD_SECURITY_PRIVILEGED = "true"
          MEMORY = "6144"
          OS = [
            ARCH = "x86_64",
            FIRMWARE_SECURE = "YES" ]
          SCHED_REQUIREMENTS = "HYPERVISOR=kvm"
          VCPU = "4"
          SCHED_ACTION = [
            ACTION = "undeploy",
            ID     = "0",
            TIME   = "+7200" ]
          SCHED_ACTION = [
            ACTION = "terminate",
            ID     = "1",
            TIME   = "+57600" ]

  control_plane_replicas: 1

  machine_deployments:
    md0:
      replicas: 2

cluster_virtual_ip: 172.20.86.20

# We can define users if needed (.cluster.kubeadm.users[])
  #kubeadm:
  #  users:
  #    - name: sylva-user
  #      passwd: "put your password hash here"  # (copy pasted from /etc/shadow or created with "mkpasswd --method=SHA-512 --stdin")
  #      groups: users
  #      sudo: ALL=(ALL) NOPASSWD:ALL
  #      shell: /bin/bash
  #      lockPassword: false
  #      sshAuthorizedKeys:
  #        - ssh-rsa AAAA...... YOUR KEY HERE ....UqnQ==

sylva_diskimagebuilder_images: {}

proxies:
  # put your own proxy settings here if you need
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""

# configure containerd registry mirrors following https://github.com/containerd/containerd/blob/main/docs/hosts.md
# see charts/syla-units/values.yaml for a more detailled example
# registry_mirrors:
#   hosts_config:
#     docker.io:
#     - mirror_url: http://your.mirror/docker

# add ntp servers if you need
ntp:
  enabled: false
  servers:
  # - 1.2.3.4
  # - 1.2.3.5

units:
  kube-storage-version-migrator:
    enabled: false

  trivy-operator:
    enabled: false

  kubevirt:
    enabled: false

  kubevirt-test-vms:
    enabled: false

  kubevirt-manager:
    enabled: false

  kubevirt-cdi:
    enabled: false

  harbor-init:
    enabled: false

  harbor-postgres:
    enabled: false

  harbor:
    enabled: false

  cis-operator-crd:
    enabled: false

  cis-operator:
    enabled: false

  cis-operator-scan:
    enabled: false

  neuvector-init:
    enabled: false

  neuvector:
    enabled: false

  capo:
    enabled: false

  capm3:
    enabled: false

  capv:
    enabled: false

  cabpoa:
    enabled: false

  openshift-assisted-installer:
    enabled: false

  metal3:
    enabled: false

  metal3-pdb:
    enabled: false

  capone:
    enabled: true

  #local-path-provisioner:
  #  enabled: true

  rke2-helmchart-prevent-uninstall:
    enabled: false

  heat-operator:
    enabled: false

  capo-cloud-config:
    enabled: false

  capo-cluster-resources:
    enabled: false

  cinder-csi:
    enabled: false

  flux-webui-init:
    enabled: false

  flux-webui:
    enabled: false

  alertmanager-jiralert:
    enabled: false

  alertmanager-jiralert-config:
    enabled: false

  alertmanager-config:
    enabled: false

  kepler:
    enabled: false

  snmp-exporter:
    enabled: false

  sylva-dashboards:
    enabled: false

  multus:
    enabled: false

  multus-ready:
    enabled: false

  sriov-crd:
    enabled: false

  sriov-network-operator:
    enabled: false

  sriov:
    enabled: false

  sriov-resources:
    enabled: false

  nfs-ganesha-init:
    enabled: false

  nfs-ganesha:
    enabled: false

  test-nfs-ganesha:
    enabled: false

  ceph-csi-cephfs:
    enabled: false

  longhorn-crd:
    enabled: true

  longhorn:
    enabled: true

  longhorn-engine-image-cleanup:
    enabled: true

  longhorn-instance-manager-cleanup:
    enabled: true

  os-images-info:
    enabled: false

  os-image-server:
    enabled: false

  capo-contrail-bgpaas:
    enabled: false

  vsphere-cpi:
    enabled: false

  vsphere-csi-driver:
    enabled: false

  sandbox-privileged-namespace:
    enabled: false

  gitea-secrets:
    enabled: false

  gitea-eso:
    enabled: false

  gitea-keycloak-resources:
    enabled: false

  gitea-redis:
    enabled: false

  gitea-postgresql-ha:
    enabled: false

  gitea:
    enabled: false

  minio-operator-init:
    enabled: false

  minio-operator:
    enabled: false

  minio-logging-init:
    enabled: false

  minio-logging:
    enabled: false

  minio-monitoring-init:
    enabled: false

  minio-monitoring:
    enabled: false

  thanos-init:
    enabled: false

  thanos-credentials-secret:
    enabled: false

  thanos:
    enabled: false

  logging-crd:
    enabled: false

  logging:
    enabled: false

  logging-config:
    enabled: false

  sylva-logging-flows:
    enabled: false

  loki-init:
    enabled: false

  loki-credentials-secret:
    enabled: false

  loki:
    enabled: false

  single-replica-storageclass:
    enabled: false

  two-replicas-storageclass:
    enabled: false

  sylva-prometheus-rules:
    enabled: false

  sylva-thanos-rules:
    enabled: false

  descheduler:
    enabled: false

  workload-team-defs:
    enabled: false
